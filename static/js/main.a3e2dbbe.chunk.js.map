{"version":3,"sources":["components/Video.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Video","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","setVideos","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uXAkCeA,I,QCjBAC,E,OAJKC,EAASC,cAXN,CACrBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKMC,YCqBRC,MA/Bf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACEC,GADF,WAGbC,qBAAU,WACRf,EAAGgB,WAAW,UAAUC,YAAW,SAACC,GAAD,OACjCJ,EAAUI,EAASC,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIC,gBAE1C,KCAeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a3e2dbbe.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport VideoFooter from \"./VideoFooter\";\nimport VideoSidebar from \"./VideoSidebar\";\nimport \"./Video.css\";\n\nfunction Video({ url, channel, description, song, likes, messages, shares }) {\n  const [playing, setPlaying] = useState(false);\n  const videoRef = useRef(null);\n\n  const onVideoPress = () => {\n    if (playing) {\n      videoRef.current.pause();\n      setPlaying(false);\n    } else {\n      videoRef.current.play();\n      setPlaying(true);\n    }\n  };\n\n  return (\n    <div className=\"video\">\n      <video\n        className=\"video__player\"\n        loop\n        onClick={onVideoPress}\n        ref={videoRef}\n        src={url}\n      ></video>\n      <VideoFooter channel={channel} description={description} song={song} />\n      <VideoSidebar likes={likes} messages={messages} shares={shares} />\n    </div>\n  );\n}\n\nexport default Video;","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD-pSHf-sanxq9c7h0NRXdN5gyOy9_2y2E\",\n  authDomain: \"tiktok-clone-8559e.firebaseapp.com\",\n  databaseURL: \"https://tiktok-clone-8559e.firebaseio.com\",\n  projectId: \"tiktok-clone-8559e\",\n  storageBucket: \"tiktok-clone-8559e.appspot.com\",\n  messagingSenderId: \"959006536303\",\n  appId: \"1:959006536303:web:312dbdc839df5779c3d39a\",\n  measurementId: \"G-SPT2CHBBVP\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nexport default db;","import React, {useState, useEffect } from 'react';\nimport Video from './components/Video';\nimport './App.css';\nimport db from './firebase';\n\nfunction App() {\n  const [videos, setVideos] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"videos\").onSnapshot((snapshot) =>\n      setVideos(snapshot.docs.map((doc) => doc.data()))\n    );\n  }, []);\n\n  return (\n    // BEM\n    <div className=\"app\">\n      <div className=\"app__videos\">\n        {videos.map(\n          ({ url, channel, description, song, likes, messages, shares }) => (\n            <Video\n              url={url}\n              channel={channel}\n              song={song}\n              likes={likes}\n              messages={messages}\n              description={description}\n              shares={shares}\n            />\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}